//globals
cbuffer MatrixBuffer
{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projectionMatrix;
}

texture ModelTexture;
sampler2D textureSampler = sampler_state {
    Texture = (ModelTexture);
    MagFilter = Linear;
    MinFilter = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
};

//structs
struct VOut
{
    float4 position : SV_POSITION;
    float4 color : COLOR;
	float2 TextureCoordinate : TEXCOORD;
};

VOut VShader(float4 position : POSITION, float4 color : COLOR, float2 TextureCoordinate : TEXCOORD)
{
    VOut output;

    output.position = mul(worldMatrix, position);
	output.position = mul(viewMatrix, output.position);
	output.position = mul(projectionMatrix, output.position);
    output.color = color;

	output.TextureCoordinate = TextureCoordinate;
	
    return output;
}


float4 PShader(float4 position : SV_POSITION, float4 color : COLOR, float2 TextureCoordinate : TEXCOORD) : SV_TARGET
{
    return color;
	
	float4 textureColor = tex2D(textureSampler, TextureCoordinate);
	textureColor.a = 1;
	return textureColor;
}